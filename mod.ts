import { GenerateAuthenticationOptionsOpts, GenerateRegistrationOptionsOpts, VerifiedRegistrationResponse } from "@simplewebauthn/server";
import { loginHandler } from "./login.ts";
import { registerHandler } from "./register.ts";

/** Configuration for genServeFun {@link genServeFun}
 * @example
 *Deno.serve({ port: 5180 }, genServeFun({
      register_path: "/register",
      login_path: "/login",
      webauthn: {
       ...webauthnconfig
      },
      async generateId() {
        //Code to generate a uuid
      },
      async createUser(userID, userName, authenticator) {
        //code to create final user
      },
      async validateUser(userName: string, email: string) {
        //Code to validate user before creation
      }
    }))
*/
export type Config = {
  /**Route to connect to for registration e.g. "/register" */
  register_path: string
  /**Route to connect to for logging in e.g. "/login" */
  login_path: string
  /**SimpleWebauthn config for register and login combined */
  webauthn: Omit<GenerateRegistrationOptionsOpts & GenerateAuthenticationOptionsOpts, "challenge" | "userID" | "userName" | "excludeCredentials">
  /**Async function to create a user in your db
   * @param userID a uuid generated by {@link crypto.randomUUID()}
   * @param userName the user name entered by the user. Needs to be unique
   * @param authenticator The Data required for logging a user in later
   */
  createUser: (userID: string, userName: string, authenticator: VerifiedRegistrationResponse["registrationInfo"]) => Promise<void>
  /**Function to generate custom ids for your db. (exposed in public api) */
  generateId: () => Promise<string>
  /**Custom function to validate a user name which needs to be unique */
  validateUser: (id: string, userName: string) => Promise<boolean>
  /**Function to map an email to all required data of a user. Returns null if no user is found */
  getUserByName: (userName: string) => Promise<{ userID: string, userName: string, authenticator: VerifiedRegistrationResponse["registrationInfo"] } | null>
  /**Origin of your website required for validating client response
   * @example http://localhost:5173
   */
  websiteOrigin: string
}

/** Generates a function that can be passed to Deno.serve 
 * @param {Config} conf - {@link Config} for webauthn and user creation of
 * 
 * @example
 * Deno.serve({
 *  //Server Config
 * }, genServeFun({
 *    //webauthn & db Config
 * }))
 * @tags --unstable-kv --allow-net
*/
export default function genServeFun(conf: Config): (req: Request) => Promise<Response> {
  return async (req: Request) => {
    const reqUrl = new URL(req.url)
    //Handle not used paths
    if (reqUrl.pathname !== conf.register_path && reqUrl.pathname !== conf.login_path) {
      return new Response(null, { status: 404 })
    }
    if (req.method.toLocaleLowerCase() == "get") {
      const goal: "register" | "login" = reqUrl.pathname == conf.register_path ? "register" : "login"
      const userName = reqUrl.searchParams.get("username")

      if (userName === null) {
        return new Response("No username provided", { status: 400 })
      }

      /**Handle register */
      if (goal == "register") {
        const userID = await conf.generateId()
        if (!(await conf.validateUser(userID, userName))) {
          return new Response("Email and username rejected", { status: 400 })
        }
        const registrationOpt: GenerateRegistrationOptionsOpts = {
          ...conf.webauthn,
          userID,
          userName: userName,
        }
        try {
          const { response, socket } = Deno.upgradeWebSocket(req)
          socket.addEventListener("open", (_) => {
            registerHandler.handleOpen(socket, req, registrationOpt)
          });
          socket.addEventListener("message", async (event) => {
            if (event.data === "ping") {
              socket.send("pong");
            } else {
              await registerHandler.handleMessage(socket, req, event, registrationOpt, conf.createUser, conf.websiteOrigin);
            }
          });
          socket.addEventListener("close", (event) => {
            registerHandler.handleClose(socket, req, event)
          })
          socket.addEventListener("error", (event) => {
            registerHandler.handleError(socket, req, event)
          })
          return response
        } catch (e) {
          return new Response(e.toString(), { status: 400, statusText: e.toString() })
        }
      }
      /**handle login */
      else if (goal == "login") {
        const user = await conf.getUserByName(userName)
        if (user == null)  {
          return new Response("User not found", {status: 404})
        }
        const { response, socket } = Deno.upgradeWebSocket(req)

        socket.addEventListener("open", async (ev) => {
          await loginHandler.handleOpen(socket, req, {
            ...conf.webauthn,
            userID: user.userID,
            userName: user.userName
          })
        })

        socket.addEventListener("message", (event) => {
          if (event.data === "ping") {
            socket.send("pong");
          } else {
            loginHandler.handleMessage(socket, req, event);
          }
        })

        socket.addEventListener("close", (event) => {
          loginHandler.handleClose(socket, req, event)
        })
        socket.addEventListener("error", (event) => {
          loginHandler.handleError(socket, req, event)
        })
        return response
      } else return new Response("Unreachable", { status: 500 });


    } else if (req.method.toLocaleLowerCase() == "options") {
      return new Response(null, {
        headers: {
          "Allow": "OPTIONS, GET"
        },
        status: 204
      })

    } else {
      return new Response(null, { status: 405 })
    }
  }
}